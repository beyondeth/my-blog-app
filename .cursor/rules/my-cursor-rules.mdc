---
description: 
globs: 
alwaysApply: true
---
# Cursor AI Development Rules

## Code Reusability & Legacy Management

### Primary Principles
- **Always prioritize code reuse** - Before writing new code, thoroughly examine existing codebase for reusable components
- **Design for reusability** - When creating new code, always consider future reuse scenarios and modularity
- **Maximize existing code utilization** - During modifications, leverage existing code structures to the fullest extent possible

### Legacy Code Protection
- **NEVER delete core legacy code** unrelated to current requirements - This is extremely dangerous
- **Exercise extreme caution** when modifying or deleting any existing code
- **Preserve functional legacy systems** unless explicitly required to remove them
- **Validate dependencies** before making any deletions

## Architecture & Communication

### Backend-Frontend Integration
- Ensure **seamless communication** between backend and frontend
- Design APIs with clear contracts and consistent data structures
- Implement proper error handling and response standardization

### Code Organization
- **Reuse common code and logic** across components
- Create shared utilities and helper functions
- Maintain consistent patterns throughout the application
- Write **clean, readable code** with proper documentation

### Duplication Prevention
- **Never create new implementations** when existing solutions are available
- Always check for existing implementations before building new features
- Refactor existing code rather than duplicating functionality

## Technical Standards

### Code Quality
- Follow **clean code principles**
- Ensure **type safety** throughout the application
- Implement proper error handling and validation
- Use meaningful variable and function names

### Technology Stack
- **Frontend**: Next.js
- **Backend**: Nest.js
- Maintain consistency with established patterns in both frameworks

## Development Workflow

### Process Guidelines
- **DO NOT** kill and restart backend/frontend services unnecessarily
- Developer manages service lifecycle independently
- **Avoid repetitive explanations** - provide direct, actionable solutions

### Knowledge Management
- **Avoid outdated code patterns** and deprecated methods
- When uncertain about implementation details, **use context7** to leverage MCP capabilities
- Stay current with modern development practices and framework updates

## Implementation Rules

### Before Making Changes
1. Analyze existing codebase thoroughly
2. Identify reusable components and patterns
3. Plan modifications to preserve existing functionality
4. Consider impact on dependent systems

### During Development
1. Follow established architectural patterns
2. Maintain type safety and error handling
3. Write self-documenting code
4. Test integration points thoroughly

### Code Review Criteria
1. Reusability potential
2. Clean code standards
3. Type safety compliance
4. Integration compatibility
5. Legacy code preservation